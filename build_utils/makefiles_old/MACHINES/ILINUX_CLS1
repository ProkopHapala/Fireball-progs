#ILINUX_CLS1 cls1.ftmc.uam.es 


#SERIE       : Makefile: METHOD = DOUBLE    ; PARALLEL =      (diag. complex)
#SERIE-GAMMA : Makefile: METHOD = GAMMA     ; PARALLEL =      (diag. real)
#PARALELO    : Makefile: METHOD = SCALAPACK ; PARALLEL = MPI  (only one kpts GAMMA)
#export PATH="/opt/intel/impi/4.1.0.024/bin64/":$PATH
#export LD_LIBRARY_PATH="/opt/intel/impi/4.1.0.024/lib64/":$LD_LIBRARY_PATH

ifneq (,$(findstring ILINUX, ${MACHINE}))
	F77 = ifort
	F90 = ifort
#       module load intel/intel-11
	PATH_MKL = /opt/intel/Compiler/11.1/064/mkl/lib/em64t/
	PATH_FFTW_LIB = /opt/intel/Compiler/11.1/064/mkl/interfaces/fftw3xf/
	PATH_FFTW_INCL = -I$/opt/intel/Compiler/11.1/064/mkl/include/fftw/
	DFLAGS = -r8 -w90 -tpp7 -mp1 -fno-alias -unroll -no-ipo
	ifneq (,$(findstring OPT, ${MODE}))
		ifneq (,$(findstring YES, ${CCOMPILE}))
			FFLAGS = -O3 -r8  -fno-alias -unroll -static -pg 
		else
			FFLAGS = -r8 -O3 -fno-alias -unroll -fpp -no-ipo -pg 
		endif
	endif
	ifneq (,$(findstring DEBUG, ${MODE}))
		FFLAGS = -g -r8 -check all -fpp  -check output_conversion -check format -no-ipo
		DFLAGS = -g -r8 -check all -mp1 
		LFLAGS = 
	endif
	ifneq (,$(findstring YES,${USEBLAS}))
		LFLAGS = -L${PATH_MKL} -lmkl_intel_lp64 -lmkl_core -lmkl_sequential \
			-L${PATH_FFTW_LIB} ${PATH_FFTW_LIB}libfftw3xf_intel.a ${PATH_FFTW_INCL} -lm -lmkl_intel_lp64
		BLAS = 
	endif
	ifneq (,$(findstring MPI, ${PARALLEL}))
		ifneq (,$(findstring SCALAPACK, ${METHOD}))
        		F77 = mpiifort
	        	F90 = mpiifort
        		PATH_MPI_LIB = /opt/intel/impi/4.1.0.024/lib64/
	        	PATH_MPI_INC = /opt/intel/impi/4.1.0.024/include64/
        		PARLFLAGS = -static-intel -L/opt/intel/mkl/10.1.2.024/lib/em64t/ -lmkl_scalapack_lp64 \
			-lmkl_blacs_intelmpi_lp64 -lmkl_lapack -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core \
			-lguide -lpthread -limf ${PATH_FFTW_INCL} -lfftw3xf_intel -lm \
        		-Bdynamic -L${PATH_MPI_LIB} -I${PATH_MPI_INC} -lmpi
	        FFLAGS = -r8 -O2 -funroll-loops -mtune=pentium4 -assume byterecl -align -pad -static-intel
		endif
	endif
	CC = icc
	CFLAGS = ${FFLAGS}
endif

