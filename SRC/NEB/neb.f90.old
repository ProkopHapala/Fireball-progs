! copyright info:
!
!                             @Copyright 2005
!                           Fireball Committee
! Brigham Young University - James P. Lewis, Chair
! Arizona State University - Otto F. Sankey
! Universidad de Madrid - Jose Ortega
! Universidad de Madrid - Pavel Jelinek
!
! Other contributors, past and present:
! Auburn University - Jian Jun Dong
! Arizona State University - Gary B. Adams
! Arizona State University - Kevin Schmidt
! Arizona State University - John Tomfohr
! Lawrence Livermore National Laboratory - Kurt Glaesemann
! Motorola - Jun Wang
! Ohio State University - Dave Drabold

!
! RESTRICTED RIGHTS LEGEND
! Use, duplication, or disclosure of this software and its documentation
! by the Government is subject to restrictions as set forth in subdivision
! { (b) (3) (ii) } of the Rights in Technical Data and Computer Software
! clause at 52.227-7013.

! neb.f90
! Program Description
! ===========================================================================
!  we use the improved  nigged elastic band method for finding MEP 
! (minimum energy path) using new definition of tanget 
! for detail see Journal od Chem. Phys. vol 113, no. 22, p. 9978 (2000)
!
! ===========================================================================
! Code written by:
! K. Kosmider
! and 
! P. Jelinek
! Department of Thin Films
! Institute of Physics AS CR
! Cukrovarnicka 10
! Prague 6, CZ-162
! FAX +420-2-33343184
! Office telephone  +420-2-20318528
! email: jelinekp@fzu.cz
!
! ===========================================================================
!
! Program Declaration
! ===========================================================================
 subroutine move_neb (natoms, itime, etot, force)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: itime
   real, intent(in)                                 :: etot

   real, dimension(3,natoms), intent(inout)         :: force

! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer img

! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters


   if (itime .gt. 2) then  
    
    write (*,*) 'image_neb =',image_neb,'itime =',itime

! save energy & force of the given image
    etot_neb(image_neb) = etot

    do iatom = 1, natoms
     ftot_neb(:,iatom,image_neb) = force(:,iatom)
    enddo ! do iatom

! next image
    if (image_neb .eq. (nimg_neb-1)) then
! here we move all images along projected NEB forces
! loop over free images
      do img = 2,nimg_neb-1
! 1. calc tangent
       write (*,*) 'doing tangent...',img
       call get_tang (natoms, img)
! 2. project out the spring forces
       call get_Fspring (natoms, img)
! 3. project out the rectangular part of total forces 
       call get_Frec (natoms, img)
! 4. evaluate NEB forces
       call get_Fneb (natoms, img)
! 5. move the image according to the NEB forces 
       call move_image (natoms, img)
      enddo

! check convergence & max_number of iterations
     image_neb = 2 

    else

     image_neb = image_neb + 1

    endif

    write (*,*) 'copy new image',image_neb
! copy new image 
    do iatom = 1, natoms
     ratom(:,iatom) = ratom_neb(:,iatom,image_neb)
    enddo ! do iatom

! Initial image 
   else if (itime .eq. 1) then

! save energy of the initial image 
    etot_neb(1) = etot 
! copy the final image for next step
    do iatom = 1, natoms
     ratom(:,iatom) = ratom_neb(:,iatom,nimg_neb)
    enddo ! do iatom 

! Final image (itime =2)
   else   
! save energy of the final image
    etot_neb(nimg_neb) =  etot
! copy 2nd image for next step
    do iatom = 1, natoms
     ratom(:,iatom) = ratom_neb(:,iatom,2)
    enddo ! do iatom
    image_neb = 2

   endif ! if (itime .gt. 2) 

   return

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================
36 format(' ++ atom= ',i4,6f12.5) 
37 format(' ++ atom= ',i4,3f12.5)
38 format(i3,3f18.9)
100 format (2x,'  +++ Etot  RES =', f16.8,'  TOL = ',f16.8,'   CONVERGED ')
101 format (2x,'  +++ Etot  RES =', f16.8,'  TOL = ',f16.8,'   NOT CONVERGED ')
110 format (2x,'  +++ Fmax  RES =', f16.8,'  TOL = ',f16.8,'   CONVERGED ')
111 format (2x,'  +++ Fmax  RES =', f16.8,'  TOL = ',f16.8,'   NOT CONVERGED ')
200 format (2x,' ++++ initer= ',i3,' Etot= ',f16.8,' Fi_max= ',f14.6)
201 format (2x,' ++++ iter. no.',i3,' etot = ',f16.8 )
600 format (2x, i5, 2x, a40, 2x, i2)
601 format (2x, 10f14.8)
700 format (2x, i2, 3(2x,f18.8))
800 format (2x, a2, 3(2x,f12.6))
968 format(3f16.8,i2,2f10.6,2f4.1,i2,f12.1)
   

   return
        
 end subroutine move_neb
















 subroutine get_tang (natoms, image)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: image
 

! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer ix
   real  ee1
   real  ee2
   real  ee3 
   real  demax
   real  demin
   real  norm

   real, dimension (3,natoms)  :: r1
   real, dimension (3,natoms)  :: r2
   real, dimension (3,natoms)  :: r3

! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters

!   write (*,*) 'image = ',image
! image energies 
! i - 1
!   write (*,*) 'copy i-1:',image-1
   ee1 = etot_neb(image-1)
   do iatom = 1, natoms
    r1(:,iatom) = ratom_neb(:,iatom,image-1)
   enddo 
! i
!   write (*,*) 'copy i:',image
   ee2 = etot_neb(image)
   do iatom = 1, natoms
    r2(:,iatom) = ratom_neb(:,iatom,image)
   enddo 
! i + 1
!   write (*,*) 'copy i+1:',image+1
   ee3 = etot_neb(image+1)
   do iatom = 1, natoms
    r3(:,iatom) = ratom_neb(:,iatom,image+1)
   enddo 

! case i+1 < i < i-1  tau- eqn.(9) JCP 113,9978(2000)
   if ((ee1 .gt. ee2) .and. (ee2 .gt. ee3)) then

    do iatom = 1, natoms
     do ix = 1,3
      tang(ix,iatom) = r2(ix,iatom) - r1(ix,iatom)
     enddo
    enddo

! case i+1 > i > i-1 tau+
   else if ((ee1 .lt. ee2) .and. (ee2 .lt. ee3)) then

    do iatom = 1, natoms
     do ix = 1,3
      tang(ix,iatom) = r3(ix,iatom) - r2(ix,iatom)
     enddo
    enddo
! case i+1 > i < i-1  or  i+1 < i > i-1
   else 

    demax = max( abs(ee3-ee2),abs(ee1-ee2)) 
    demin = min( abs(ee3-ee2),abs(ee1-ee2)) 

! case i+1 > i-1 
    if (ee3 .gt. ee1) then
! loop over atoms
     do iatom = 1, natoms
      do ix = 1,3
! eqn (10)
       tang(ix,iatom) = (r3(ix,iatom) - r2(ix,iatom))*demax      &
                      + (r2(ix,iatom) - r1(ix,iatom))*demin
      enddo
     enddo
! case i+1 < i-1
    else
! loop over atoms
     do iatom = 1, natoms
      do ix = 1,3
! eqn (10)
       tang(ix,iatom) = (r3(ix,iatom) - r2(ix,iatom))*demin      &
                      + (r2(ix,iatom) - r1(ix,iatom))*demax
      enddo
     enddo ! do iatom
    endif ! if (ee3 .gt. ee1)
   endif ! if ((ee1 .gt. ee2) .and. (ee2 .gt. ee3))

! normalize tangent
   norm = 0.0d0
   do iatom = 1,natoms
    do ix = 1,3
      norm = norm + tang(ix,iatom)**2
    enddo
   enddo

   norm = sqrt(norm)

   do iatom = 1,natoms
    do ix = 1,3
      tang(ix,iatom) = tang(ix,iatom)/norm
    enddo
   enddo   


!   norm = 0.0d0
!   do iatom = 1,natoms
!    do ix = 1,3
!      norm = norm + tang(ix,iatom)**2
!    enddo
!   enddo
!   write (*,*) 'norm_new =',norm

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================

 end subroutine get_tang


 subroutine get_Fspring (natoms, image)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: image
 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer ix
 
   real  r32
   real  r21

   real, dimension (3,natoms)  :: r1
   real, dimension (3,natoms)  :: r2
   real, dimension (3,natoms)  :: r3

! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters

! i - 1
   write (*,*) 'r1'
   do iatom = 1, natoms
    r1(:,iatom) = ratom_neb(:,iatom,image-1)
    write (*,200) iatom,r1(:,iatom)
   enddo 
! i
   write (*,*) 'r2'
   do iatom = 1, natoms
    r2(:,iatom) = ratom_neb(:,iatom,image)
    write (*,200) iatom,r2(:,iatom)
   enddo 
! i + 1
   write (*,*) 'r3'
   do iatom = 1, natoms
    r3(:,iatom) = ratom_neb(:,iatom,image+1)
    write (*,200) iatom,r3(:,iatom)
   enddo
   write (*,*)

   write (*,*) ' F_spring', k_neb
   do iatom = 1, natoms
    do ix = 1,3

     r32 = abs(r3(ix,iatom) - r2(ix,iatom))
     r21 = abs(r2(ix,iatom) - r1(ix,iatom))
     write (*,*) iatom,ix,r32,r21
! the spring force component
     Fs(ix,iatom) = k_neb*(r32 - r21)*tang(ix,iatom)
     
    enddo
    write (*,100)  iatom,Fs(:,iatom),tang(:,iatom)
   enddo
   write (*,*)

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================
100 format(i3,3f8.4,'  ',3f8.4)
200 format(i3,3f8.4)

 end subroutine get_Fspring



 subroutine get_Frec (natoms, image)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: image
 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer ix
 
   real, dimension (3,natoms)  :: F

! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters

   do iatom = 1, natoms
    F(:,iatom) = ftot_neb(:,iatom,image)
    write (*,200) iatom,F(:,iatom)
   enddo 

   write (*,*) ' F_proj'
   do iatom = 1, natoms
    do ix = 1,3

! the spring force component
     Frec(ix,iatom) = F(ix,iatom) - F(ix,iatom)*tang(ix,iatom)
     
    enddo
    write (*,100)  iatom,f(:,iatom),tang(:,iatom)
   enddo
   write (*,*)

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================
100 format(i3,3f8.4,'  ',3f8.4)
200 format(i3,3f8.4)

 end subroutine get_Frec


 subroutine get_Fneb (natoms, image)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: image
 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer ix
 
! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters

   write (*,*) ' F_neb'
   do iatom = 1, natoms
    do ix = 1,3
! the spring force component
     Fneb(ix,iatom) = Fs(ix,iatom) - Frec(ix,iatom)
    enddo
    write (*,100)  iatom,Fneb(:,iatom)
   enddo
   write (*,*)

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================
100 format(i3,3f8.4)

    end subroutine get_Fneb


 subroutine move_image (natoms, image)

   use configuration
   use neb

   implicit none
   
! Argument Declaration and Description
! ===========================================================================
   integer, intent(in)                              :: natoms
   integer, intent(in)                              :: image
 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer ix
 
! Allocate Arrays
! ===========================================================================
 
! Procedure
! ===========================================================================
! Auxilliary parameters

   write (*,*) ' F_neb'
   do iatom = 1, natoms
    do ix = 1,3
! the spring force component
     Fneb(ix,iatom) = Fs(ix,iatom) - Frec(ix,iatom)
    enddo
    write (*,100)  iatom,Fneb(:,iatom)
   enddo
   write (*,*)

! Deallocate Arrays
! ===========================================================================
 
! Format Statements
! ===========================================================================
100 format(i3,3f8.4)

    end subroutine move_image