! Copyright info:
!
!                             @Copyright 2005
!                     Fireball Enterprise Center, BYU
! Brigham Young University - James P. Lewis, Chair
! Arizona State University - Otto F. Sankey
! Universidad de Madrid - Jose Ortega
! Institute of Physics, Czech Republic - Pavel Jelinek

! Other contributors, past and present:
! Auburn University - Jian Jun Dong
! Arizona State University - Gary B. Adams
! Arizona State University - Kevin Schmidt
! Arizona State University - John Tomfohr
! Lawrence Livermore National Laboratory - Kurt Glaesemann
! Motorola, Physical Sciences Research Labs - Alex Demkov
! Motorola, Physical Sciences Research Labs - Jun Wang
! Ohio University - Dave Drabold
! University of Regensburg - Juergen Fritsch

!
! RESTRICTED RIGHTS LEGEND
! Use, duplication, or disclosure of this software and its documentation
! by the Government is subject to restrictions as set forth in subdivision
! { (b) (3) (ii) } of the Rights in Technical Data and Computer Software
! clause at 52.227-7013.

! den2mesh.f90
! Program Description
! ===========================================================================
!       Project density on the mesh.
!
! ===========================================================================
! Code written by:
! ===========================================================================
!
! Program Declaration
! ===========================================================================
 subroutine den2mesh (natoms, icluster, a1vec, a2vec, a3vec)

   use configuration
   use dimensions
   use interactions
   use neighbor_map
   use grid
   use density
   use charges
   implicit none
 
! Argument Declaration and Description
! ===========================================================================
! Input
   integer, intent (in) :: icluster
   integer, intent (in) :: natoms
   
   real, intent (inout), dimension (3)         :: a1vec
   real, intent (inout), dimension (3)         :: a2vec
   real, intent (inout), dimension (3)         :: a3vec

!Output

 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
   integer iatom
   integer imu, inu
   integer in1, in2
   integer jatom
   integer mbeta
   integer ineigh
   integer index
   integer index0
   integer ind
   integer i, j, k
   integer i0, j0, k0
   integer lmu
   integer issh
   integer l
   integer imesh
   integer job
   integer, dimension (3) :: ipiv
   integer, dimension (3) :: nr

   integer iD
   real maxD


   real distX
   real distY
   real qtot
   real renorm
   real dens

   real, dimension (3) :: rvec
   real, dimension (3) :: r1
   real, dimension (3) :: r2
   real, dimension (3) :: r21
   real, dimension (3) :: u
   real, dimension (3) :: dXr
   real, dimension (3) :: dYr
   real, dimension (3) :: gX
   real, dimension (3) :: gP
   real, dimension (3) :: X0
   real, dimension (3) :: Y0


!   real, dimension (nspec_max):: rcutoff_max
   real, dimension (numorb_max)   :: psi1
   real, dimension (3,numorb_max) :: dpsi1
   real, dimension (numorb_max)   :: psi2
   real, dimension (3,numorb_max) :: dpsi2
   real :: psiR
   real :: dpsiR
   real, dimension (5)            :: psiL
   real, dimension (3,5)          :: dpsiL

   real, dimension (3,natoms)     :: ratom2g
   real, dimension (3,3)          :: amat

! Procedure
! ===========================================================================

! reset variables
   drhoG = 0.0d0
   job = 0

! set nr(:)
   nr(1) = rm1
   nr(2) = rm2
   nr(3) = rm3
   
   renorm = 0.0d0
! Loop over atoms 
   do iatom = 1, natoms
! make a copy of the elem grid lattice vector
    do i = 1,3
     amat(:,i) = elvec(i,:)
    enddo 
    in1 = imass(iatom)
    r1(:) = ratom(:,iatom)

! vector between the atom and initial point of the grid
    do i = 1,3    
     rvec(i) = ratom(i,iatom) - g0(i)
! save vector for next
     u(i) = rvec(i)
    enddo ! i

! solve linear set of equations (3x3)
    call dgesl(amat,3,ipiv,u,job) 

! round coefficients to get the position of the nearest point of the grid gX
    i0 = nint( u(ipiv(1)) )
    j0 = nint( u(ipiv(2)) )
    k0 = nint( u(ipiv(3)) )


! find the vector u between the iatom X0 and the nearest point gX 
    u(1) = u(ipiv(1)) - real(i0)
    u(2) = u(ipiv(2)) - real(j0)
    u(3) = u(ipiv(3)) - real(k0)

! check if the nearest grid point is located within the unit cell of the grid 
! if not, let map it there
!i0
    if (i0 .lt. 0) then
     i0 = i0 + rm1*(int(abs(i0/rm1)) + 1)
    else 
     i0 = i0 - rm1*int(i0/rm1)
    endif
!j0
    if (j0 .lt. 0) then
     j0 = j0 + rm2*(int(abs(j0/rm2)) + 1)
    else 
     j0 = j0 - rm2*int(j0/rm2)
    endif
!k0
    if (k0 .lt. 0) then
     k0 = k0 + rm3*(int(abs(k0/rm3)) + 1)
    else 
     k0 = k0 - rm3*int(k0/rm3)
    endif


! find the coordinates of gX
    gX(1) = i0*elvec(1,1) + j0*elvec(2,1) + k0*elvec(3,1)
    gX(2) = i0*elvec(1,2) + j0*elvec(2,2) + k0*elvec(3,2)
    gX(3) = i0*elvec(1,3) + j0*elvec(2,3) + k0*elvec(3,3)

! evaluate coordinates of iatom in the grid coord system
    X0(1) = gX(1) + u(1)*elvec(1,1) + u(2)*elvec(2,1) + u(3)*elvec(3,1)
    X0(2) = gX(2) + u(1)*elvec(1,2) + u(2)*elvec(2,2) + u(3)*elvec(3,2)
    X0(3) = gX(3) + u(1)*elvec(1,3) + u(2)*elvec(2,3) + u(3)*elvec(3,3)

! vector pointing from gX to X0
    u(1) = X0(1) - gX(1)
    u(2) = X0(2) - gX(2)
    u(3) = X0(3) - gX(3)

! save iatom coord within the grid unit cell
    ratom2g(:,iatom) = X0(:)

! find index of the gX point within the extended mesh
    index0 = 1 + (i0+emx1) + em1*(j0+emx2) + em1*em2*(k0+emx3)

! Loop over the neighbors
    do ineigh = 1, neighn(iatom)

     jatom = neigh_j(ineigh,iatom)

      mbeta = neigh_b(ineigh,iatom)
      r2(:) = ratom(:,jatom) + xl(:,mbeta)
      in2 = imass(jatom)

      do i = 1,3
       r21(i) = r2(i) - r1(i)
      enddo


! Loop over points in the atomic mesh gP
      do imesh = 1, nam 
! restore index of the given mesh point gP within the extended mesh 
       index = index0 + am2rc(imesh)

! evaluate the vector between the iatom and the mesh point gP
       do i = 1,3
        dXr(i) = ram2rc(i,imesh) - u(i)
       enddo
! evaluate the vector between the jatom and the mesh point gP
       do i = 1,3
        dYr(i) = dXr(i) - r21(i)
       enddo
! distance between the mesh point and jatom
       distY = sqrt(dYr(1)**2 + dYr(2)**2 + dYr(3)**2)

! check if jatom overlap with the gP mesh point
       if (distY .lt. Rc_max) then 

! distance between the mesh point and iatom
        distX = sqrt(dXr(1)**2 + dXr(2)**2 + dXr(3)**2)

! restore wavefunctions of iatom
        imu = 1
        do issh = 1,nssh(in1)
! get radial part of wf.
         call getpsi(in1,issh,distX,psiR,dpsiR)
! angular momentum
         l = lssh(issh,in1)
         call getYlm(l,dXr,psiL,dpsiL)
         do lmu = 1, (2*l+1)
! get spherical harmonics part of wf.
          psi1(imu) = psiL(lmu)*psiR
          imu = imu + 1
         enddo ! do lmu
        enddo ! do issh

! restore wavefunctions of jatom
        imu = 1
        do issh = 1,nssh(in2)
! get radial part of wf.
         call getpsi(in2,issh,distY,psiR,dpsiR)
! angular momentum
         l = lssh(issh,in2)
         call getYlm(l,dYr,psiL,dpsiL)
         do lmu = 1, (2*l+1)
! get spherical harmonics part of wf.
          psi2(imu) = psiL(lmu)*psiR
          imu = imu + 1
         enddo ! do lmu
        enddo ! do issh

! map the point from the extended mesh into the normal mesh
	ind = e2r(index) - 1

! assemble density
        dens = 0.0d0
        do inu = 1, num_orb(in1)
         do imu = 1, num_orb(in2)
          dens = dens + rho(inu,imu,ineigh,iatom)                &
      &        *psi1(inu)*psi2(imu)
          renorm = renorm + dvol
         enddo ! do inu
        enddo ! do imu

! store variation of density at given point
        drhoG(ind) = dens + drhoG(ind)
       endif ! if (Rc_max) 
      end do ! do imesh
    end do ! do ineigh 
   end do ! do iatom

   drhoG = drhoG
! test for hydrogen s-orbital the quality of the integration; 
! the ratio it should go to one with higher Ecut
   dens = 4.0d0*3.141592653589793238462643*Rc_max**3/3.0d0

! calc the total denstity
  dens = 0.0d0
  do i = 0,nrm-1
   dens = dens + drhoG(i)*dvol
  enddo
  write (*,*) ' -- Total density before renormalization =',dens

! sum total charge of the system
  qtot = 0.0d0
  do iatom = 1, natoms
    in1 = imass(iatom)
    do issh = 1, nssh(in1)
      qtot = qtot + Qin(issh,iatom)
    end do
  end do

! the renormalization factor
  renorm = qtot/dens

! check total density after renormalization
  dens = 0.0d0
  do i =0,nrm-1
   drhoG(i) = drhoG(i)*renorm
   dens = dens + drhoG(i)*dvol
  enddo
  write (*,*) ' -- Total density after renormalization =',dens


! write out density into density.xsf file (format of xcrysden visual code)
!  for details see www.xcrysden.org
  open ( unit = 301, file = 'density.xsf', status = 'unknown' )
! print the list of atoms
  if (icluster .eq. 1) then
 
   write (301,*) 'ATOMS'
   do iatom = 1,natoms
    write (301,'(i2,3f14.8)') nzx(imass(iatom)),(ratom2g(i,iatom),i=1,3)
   enddo

  else

   write (301,*) 'CRYSTAL'
   write (301,*) 'PRIMVEC'
   write (301,*) (a1vec(i),i=1,3)
   write (301,*) (a2vec(i),i=1,3)
   write (301,*) (a3vec(i),i=1,3)

   write (301,*) 'PRIMCOORD'
   write (301,*) natoms,1
   do iatom = 1,natoms
    write (301,'(i2,3f14.8)') nzx(imass(iatom)),(ratom2g(i,iatom),i=1,3)
   enddo

  endif
           
  write (301,*)
  write (301,*) 'BEGIN_BLOCK_DATAGRID_3D'
  write (301,*) 'density_3D'
  write (301,*) 'DATAGRID_3D_DENSITY'
  write (301,*) rm1+1, rm2+1, rm3+1
! print origin of the grid
  write (301,*) 0.0d0, 0.0d0, 0.0d0
! print lattice vector
  write (301,*) (a1vec(i),i=1,3)
  write (301,*) (a2vec(i),i=1,3)
  write (301,*) (a3vec(i),i=1,3)

! print values of the grid point
  do k = 0, rm3
    if (k .eq. rm3) then
     k0 = 0
    else 
     k0 = k
    endif
    do j = 0, rm2
      if (j .eq. rm2) then
       j0 = 0
      else 
       j0 = j
      endif
      do i = 0, rm1
        if (i .eq. rm1) then 
         i0 = 0
        else
         i0 = i
        endif
! mapping index within the regular mesh
        index = i0 + rm1*j0 + rm1*rm2*k0
! filter out negative values & small shift out of zero 
! for better plot in Xcrysden
        if (drhoG(index) .le. 0.0d0) then
         write (301,200) 0.00000001d0
        else 
         write (301,200) drhoG(index)
        endif
      enddo ! do i
    enddo ! do j
  enddo ! do k
  write (301,*) 'END_DATAGRID_3D'
  write (301,*) 'END_BLOCK_DATAGRID_3D'
! close file
  close (301)


! Format Statements
! ===========================================================================
100 format (3f14.6,4x,f14.6) 
200 format (e14.6) 

   return
 end subroutine den2mesh

! Updated 10/24/2001.
!
!cccccccccccccccccccccccc     Program 4.3     cccccccccccccccccccccccccc
!
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!                                                                      c
! Please Note:                                                         c
!                                                                      c
! (1) This computer program is part of the book, "An Introduction to   c
!     Computational Physics," written by Tao Pang and published and    c
!     copyrighted by Cambridge University Press in 1997.               c
!                                                                      c
! (2) No warranties, express or implied, are made for this program.    c
!                                                                      c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!
     SUBROUTINE  DGESL (A,N,INDX,B)
!
! An example of solving linear equation set A(N,N)*X(N) = B(N)
! with the partial-pivoting Gaussian elimination scheme.  The
! numerical values are for the Wheatstone bridge example discussed
! in Section 4.1 in the book with all resistances being 100 ohms
! and the voltage 200 volts.
!
!!      PARAMETER (N=3)
      DIMENSION X(N),B(N),A(N,N),INDX(N)
!!      DATA B/200.0,0.0,0.0/,
!!     *     ((A(I,J), J=1,N),I=1,N) /100.0,100.0,100.0,-100.0,
!!     *                   300.0,-100.0,-100.0,-100.0, 300.0/
!!
      CALL LEGS (A,N,B,X,INDX)
! 
!!      WRITE (6, 999) (X(I), I=1,N)
!!      STOP
        B(:) = X(:)
 
        RETURN
  999 FORMAT (F16.8)
      END
!
      SUBROUTINE LEGS(A,N,B,X,INDX)
!
! Subroutine to solve the equation A(N,N)*X(N) = B(N) with the
! partial-pivoting Gaussian elimination scheme.
!
      DIMENSION A(N,N),B(N),X(N),INDX(N)
!
      CALL ELGS(A,N,INDX)
!
      DO     100 I = 1, N-1
        DO    90 J = I+1, N
            B(INDX(J)) = B(INDX(J)) - A(INDX(J),I)*B(INDX(I))
   90   CONTINUE
  100 CONTINUE
!
      X(N) = B(INDX(N))/A(INDX(N),N)
      DO     200 I = N-1, 1, -1
        X(I) = B(INDX(I))
        DO   190 J = I+1, N
          X(I) = X(I)-A(INDX(I),J)*X(J)
  190   CONTINUE
          X(I) =  X(I)/A(INDX(I),I)
  200 CONTINUE
!
      RETURN
      END
!
      SUBROUTINE ELGS(A,N,INDX)
!
! Subroutine to perform the partial-pivoting Gaussian elimination.
! A(N,N) is the original matrix in the input and transformed
! matrix plus the pivoting element ratios below the diagonal in
! the output.  INDX(N) records the pivoting order.

!
      DIMENSION A(N,N),INDX(N),C(N)
!
! Initialize the index
!
      DO     50    I = 1, N
        INDX(I) = I
   50 CONTINUE
!
! Find the rescaling factors, one from each row
!
        DO     100   I = 1, N
          C1= 0.0
          DO    90   J = 1, N
            C1 = AMAX1(C1,ABS(A(I,J)))
   90     CONTINUE
          C(I) = C1
  100   CONTINUE
!
! Search the pivoting (largest) element from each column
!
      DO     200   J = 1, N-1
        PI1 = 0.0
        DO   150   I = J, N
          PI = ABS(A(INDX(I),J))/C(INDX(I))
          IF (PI.GT.PI1) THEN
            PI1 = PI
            K   = I
          ELSE
          ENDIF
  150   CONTINUE
!
! Interchange the rows via INDX(N) to record pivoting order
!
        ITMP    = INDX(J)
        INDX(J) = INDX(K)
        INDX(K) = ITMP
        DO   170   I = J+1, N
          PJ  = A(INDX(I),J)/A(INDX(J),J)
!
! Record pivoting ratios below the diagonal
!
          A(INDX(I),J) = PJ
!
! Modify other elements accordingly
!
          DO 160   K = J+1, N
            A(INDX(I),K) = A(INDX(I),K)-PJ*A(INDX(J),K)
  160     CONTINUE
  170   CONTINUE
  200 CONTINUE
!
      RETURN
      END

